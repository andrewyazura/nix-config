Project Path: /home/andrew/Documents/nix-config

Source Tree:

```
nix-config
├── users
│   └── andrew
│       ├── system.nix
│       └── home.nix
├── ssh-keys.nix
├── home
│   ├── gnome
│   │   ├── dconf.nix
│   │   └── default.nix
│   ├── neovim
│   │   ├── configs
│   │   │   ├── options.lua
│   │   │   ├── which-key.lua
│   │   │   ├── lsp.lua
│   │   │   ├── cmp.lua
│   │   │   ├── conform.lua
│   │   │   ├── gitsigns.lua
│   │   │   ├── treesitter.lua
│   │   │   └── telescope.lua
│   │   └── default.nix
│   ├── ghostty
│   │   └── default.nix
│   ├── vesktop
│   │   ├── vesktop.desktop
│   │   └── default.nix
│   ├── ssh
│   │   ├── default.nix
│   │   └── config
│   ├── git
│   │   └── default.nix
│   ├── kitty
│   │   └── default.nix
│   ├── work
│   │   └── default.nix
│   ├── cs2
│   │   ├── autoexec.cfg
│   │   └── default.nix
│   ├── mangohud
│   │   ├── default.nix
│   │   ├── presets.conf
│   │   └── MangoHud.conf
│   ├── hyprland
│   │   ├── hyprland.conf
│   │   └── default.nix
│   ├── default.nix
│   └── zsh
│       └── default.nix
├── hosts
│   ├── r7-x3d
│   │   ├── hardware-configuration.nix
│   │   └── default.nix
│   ├── hetzner
│   │   └── default.nix
│   └── ga401
│       ├── hardware-configuration.nix
│       └── default.nix
├── system
│   ├── wooting
│   │   └── default.nix
│   ├── gnome
│   │   └── default.nix
│   ├── programs
│   │   └── default.nix
│   ├── nix
│   │   └── default.nix
│   ├── fonts
│   │   └── default.nix
│   ├── plasma6
│   │   └── default.nix
│   ├── work
│   │   └── default.nix
│   ├── obs
│   │   └── default.nix
│   ├── guitar
│   │   └── default.nix
│   ├── logitech-g920
│   │   ├── modeswitch
│   │   └── default.nix
│   ├── gaming
│   │   └── default.nix
│   ├── hyprland
│   │   └── default.nix
│   ├── minegrub
│   │   └── default.nix
│   ├── default.nix
│   └── audio
│       └── default.nix
├── README.md
├── flake.nix
└── flake.lock

```

`/home/andrew/Documents/nix-config/users/andrew/system.nix`:

```````nix
{ pkgs, lib, hostname, ... }: {
  imports = [ ../../system ]
    ++ lib.optionals (hostname == "ga401") [ ../../home/work ];

  modules = {
    fonts.enable = true;
    programs.enable = true;
  };

  programs.zsh.enable = true;

  users.users.andrew = {
    isNormalUser = true;
    description = "Andrew Yatsura";
    extraGroups = [ "networkmanager" "wheel" ];
    shell = pkgs.zsh;
  };
}

```````

`/home/andrew/Documents/nix-config/users/andrew/home.nix`:

```````nix
{ lib, hostname, ... }: {
  imports = [
    ../../home
    ../../home/ghostty
    ../../home/git
    ../../home/neovim
    ../../home/ssh
    ../../home/vesktop
    ../../home/zsh
  ] ++ lib.optionals (hostname == "r7-x3d") [
    ../../home/cs2
    ../../home/mangohud
  ] ++ lib.optionals (hostname == "ga401") [ ../../home/gnome ../../home/work ];
}

```````

`/home/andrew/Documents/nix-config/ssh-keys.nix`:

```````nix
[ "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILkI4R/WKl8OMJeBUsn/BsPJQ4oTJIQm9AkQCB+APvUG andrewyazura203@proton.me" ]

```````

`/home/andrew/Documents/nix-config/home/gnome/dconf.nix`:

```````nix
# Generated via dconf2nix: https://github.com/gvolpe/dconf2nix
{ lib, ... }:

with lib.hm.gvariant;

{
  dconf.settings = {
    "apps/seahorse/listing" = {
      keyrings-selected =
        [ "secret-service:///org/freedesktop/secrets/collection/login" ];
    };

    "apps/seahorse/windows/key-manager" = {
      height = 520;
      width = 1162;
    };

    "org/gnome/Characters" = { recent-characters = [ "129362" ]; };

    "org/gnome/Console" = {
      last-window-maximised = false;
      last-window-size = mkTuple [ 1276 480 ];
    };

    "org/gnome/Extensions" = {
      window-height = 1027;
      window-width = 725;
    };

    "org/gnome/Snapshot" = {
      is-maximized = false;
      window-height = 640;
      window-width = 800;
    };

    "org/gnome/TextEditor" = {
      last-save-directory = "file:///home/andrew/Downloads";
    };

    "org/gnome/Totem" = {
      active-plugins = [
        "open-directory"
        "variable-rate"
        "screensaver"
        "screenshot"
        "save-file"
        "recent"
        "skipto"
        "vimeo"
        "apple-trailers"
        "autoload-subtitles"
        "rotation"
        "movie-properties"
        "mpris"
      ];
      subtitle-encoding = "UTF-8";
    };

    "org/gnome/calculator" = {
      accuracy = 9;
      angle-units = "degrees";
      base = 10;
      button-mode = "basic";
      number-format = "automatic";
      show-thousands = false;
      show-zeroes = false;
      source-currency = "";
      source-units = "degree";
      target-currency = "";
      target-units = "radian";
      window-maximized = false;
      window-size = mkTuple [ 360 625 ];
      word-size = 64;
    };

    "org/gnome/control-center" = {
      last-panel = "display";
      window-state = mkTuple [ 980 640 false ];
    };

    "org/gnome/desktop/a11y/applications" = { screen-reader-enabled = false; };

    "org/gnome/desktop/app-folders" = {
      folder-children = [ "Utilities" "YaST" "Pardus" ];
    };

    "org/gnome/desktop/app-folders/folders/Pardus" = {
      categories = [ "X-Pardus-Apps" ];
      name = "X-Pardus-Apps.directory";
      translate = true;
    };

    "org/gnome/desktop/app-folders/folders/Utilities" = {
      apps = [
        "org.freedesktop.GnomeAbrt.desktop"
        "nm-connection-editor.desktop"
        "org.gnome.baobab.desktop"
        "org.gnome.Connections.desktop"
        "org.gnome.DejaDup.desktop"
        "org.gnome.DiskUtility.desktop"
        "org.gnome.Evince.desktop"
        "org.gnome.FileRoller.desktop"
        "org.gnome.font-viewer.desktop"
        "org.gnome.Loupe.desktop"
        "org.gnome.seahorse.Application.desktop"
        "org.gnome.tweaks.desktop"
        "org.gnome.Usage.desktop"
      ];
      categories = [ "X-GNOME-Utilities" ];
      name = "X-GNOME-Utilities.directory";
      translate = true;
    };

    "org/gnome/desktop/app-folders/folders/YaST" = {
      categories = [ "X-SuSE-YaST" ];
      name = "suse-yast.directory";
      translate = true;
    };

    "org/gnome/desktop/background" = {
      primary-color = "#3a4ba0";
      secondary-color = "#2f302f";
    };

    "org/gnome/desktop/calendar" = { show-weekdate = false; };

    "org/gnome/desktop/datetime" = { automatic-timezone = true; };

    "org/gnome/desktop/input-sources" = {
      mru-sources = [ (mkTuple [ "xkb" "us" ]) (mkTuple [ "xkb" "ua" ]) ];
      sources = [ (mkTuple [ "xkb" "us" ]) (mkTuple [ "xkb" "ua" ]) ];
      xkb-options = [ "terminate:ctrl_alt_bksp" ];
    };

    "org/gnome/desktop/interface" = {
      clock-show-seconds = false;
      clock-show-weekday = false;
      color-scheme = "prefer-dark";
      cursor-size = 24;
      cursor-theme = "Adwaita";
      enable-animations = false;
      enable-hot-corners = false;
      font-name = "Roboto,  10";
      icon-theme = "Adwaita";
      scaling-factor = mkUint32 1;
      text-scaling-factor = 1.0;
      toolbar-style = "text";
      toolkit-accessibility = false;
    };

    "org/gnome/desktop/notifications" = {
      application-children = [
        "gnome-power-panel"
        "steam"
        "vesktop"
        "firefox"
        "org-telegram-desktop"
        "org-gnome-settings"
      ];
      show-in-lock-screen = false;
    };

    "org/gnome/desktop/notifications/application/chromium-browser" = {
      application-id = "chromium-browser.desktop";
    };

    "org/gnome/desktop/notifications/application/firefox" = {
      application-id = "firefox.desktop";
    };

    "org/gnome/desktop/notifications/application/gnome-power-panel" = {
      application-id = "gnome-power-panel.desktop";
    };

    "org/gnome/desktop/notifications/application/org-gnome-nautilus" = {
      application-id = "org.gnome.Nautilus.desktop";
    };

    "org/gnome/desktop/notifications/application/org-gnome-settings" = {
      application-id = "org.gnome.Settings.desktop";
    };

    "org/gnome/desktop/notifications/application/org-telegram-desktop" = {
      application-id = "org.telegram.desktop.desktop";
    };

    "org/gnome/desktop/notifications/application/steam" = {
      application-id = "steam.desktop";
    };

    "org/gnome/desktop/notifications/application/vesktop" = {
      application-id = "vesktop.desktop";
    };

    "org/gnome/desktop/notifications/application/vmware-player" = {
      application-id = "vmware-player.desktop";
    };

    "org/gnome/desktop/peripherals/mouse" = { accel-profile = "flat"; };

    "org/gnome/desktop/peripherals/touchpad" = {
      two-finger-scrolling-enabled = true;
    };

    "org/gnome/desktop/screensaver" = {
      color-shading-type = "solid";
      picture-options = "zoom";
      picture-uri =
        "file:///nix/store/w3mj0f5ffgb5979niijmc3sn0xlpwr4v-simple-blue-2016-02-19/share/backgrounds/nixos/nix-wallpaper-simple-blue.png";
      primary-color = "#3a4ba0";
      secondary-color = "#2f302f";
    };

    "org/gnome/desktop/search-providers" = {
      sort-order = [
        "org.gnome.Settings.desktop"
        "org.gnome.Contacts.desktop"
        "org.gnome.Nautilus.desktop"
      ];
    };

    "org/gnome/desktop/session" = { idle-delay = mkUint32 900; };

    "org/gnome/desktop/sound" = {
      event-sounds = true;
      theme-name = "__custom";
    };

    "org/gnome/desktop/wm/keybindings" = { close = [ "<Super>q" ]; };

    "org/gnome/desktop/wm/preferences" = {
      button-layout = "icon:minimize,maximize,close";
    };

    "org/gnome/epiphany" = { ask-for-default = false; };

    "org/gnome/epiphany/state" = {
      is-maximized = false;
      window-size = mkTuple [ 1024 768 ];
    };

    "org/gnome/evolution-data-server" = { migrated = true; };

    "org/gnome/file-roller/dialogs/extract" = {
      height = 800;
      recreate-folders = true;
      skip-newer = false;
      width = 1000;
    };

    "org/gnome/file-roller/file-selector" = {
      show-hidden = false;
      sidebar-size = 300;
      sort-method = "name";
      sort-type = "ascending";
      window-size = mkTuple [ (-1) (-1) ];
    };

    "org/gnome/file-roller/listing" = {
      list-mode = "as-folder";
      name-column-width = 68;
      show-path = false;
      sort-method = "name";
      sort-type = "ascending";
    };

    "org/gnome/file-roller/ui" = {
      sidebar-width = 200;
      window-height = 480;
      window-width = 600;
    };

    "org/gnome/gnome-system-monitor" = {
      current-tab = "processes";
      show-dependencies = false;
      show-whose-processes = "user";
      window-height = 793;
      window-width = 1224;
    };

    "org/gnome/gnome-system-monitor/proctree" = {
      col-0-visible = true;
      col-0-width = 305;
      col-26-visible = false;
      col-26-width = 0;
      columns-order = [
        0
        12
        1
        2
        3
        4
        6
        7
        8
        9
        10
        11
        13
        14
        15
        16
        17
        18
        19
        20
        21
        22
        23
        24
        25
        26
      ];
      sort-col = 15;
      sort-order = 0;
    };

    "org/gnome/mutter" = {
      dynamic-workspaces = true;
      edge-tiling = false;
      # experimental-features = [ "scale-monitor-framebuffer" ];
    };

    "org/gnome/nautilus/icon-view" = { default-zoom-level = "small"; };

    "org/gnome/nautilus/list-view" = { use-tree-view = false; };

    "org/gnome/nautilus/preferences" = {
      default-folder-viewer = "icon-view";
      migrated-gtk-settings = true;
      search-filter-time-type = "last_modified";
    };

    "org/gnome/nautilus/window-state" = {
      initial-size = mkTuple [ 890 550 ];
      initial-size-file-chooser = mkTuple [ 890 550 ];
    };

    "org/gnome/nm-applet/eap/6c909423-197f-4862-9ab1-a4c771e2ffab" = {
      ignore-ca-cert = false;
      ignore-phase2-ca-cert = false;
    };

    "org/gnome/nm-applet/eap/ca442079-d825-48b9-aedf-2eea2b3131f8" = {
      ignore-ca-cert = false;
      ignore-phase2-ca-cert = false;
    };

    "org/gnome/portal/filechooser/steam" = {
      last-folder-path = "/home/andrew/Videos";
    };

    "org/gnome/settings-daemon/plugins/color" = {
      night-light-schedule-automatic = false;
    };

    "org/gnome/settings-daemon/plugins/media-keys" = {
      custom-keybindings = [
        "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/"
      ];
      screensaver = [ "<Super>x" ];
    };

    "org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0" =
      {
        binding = "<Super>t";
        command = "ghostty";
        name = "Terminal";
      };

    "org/gnome/settings-daemon/plugins/power" = {
      power-button-action = "nothing";
      sleep-inactive-ac-type = "nothing";
    };

    "org/gnome/shell" = {
      disable-user-extensions = false;
      disabled-extensions = [
        "apps-menu@gnome-shell-extensions.gcampax.github.com"
        "light-style@gnome-shell-extensions.gcampax.github.com"
        "system-monitor@gnome-shell-extensions.gcampax.github.com"
        "user-theme@gnome-shell-extensions.gcampax.github.com"
        "window-list@gnome-shell-extensions.gcampax.github.com"
        "workspace-indicator@gnome-shell-extensions.gcampax.github.com"
      ];
      enabled-extensions =
        [ "status-icons@gnome-shell-extensions.gcampax.github.com" ];
      favorite-apps = [ ];
      last-selected-power-profile = "performance";
      welcome-dialog-last-shown-version = "47.2";
    };

    "org/gnome/shell/app-switcher" = { current-workspace-only = true; };

    "org/gnome/shell/world-clocks" = { locations = [ ]; };

    "org/gnome/tweaks" = { show-extensions-notice = false; };

    "org/gtk/gtk4/settings/file-chooser" = {
      date-format = "regular";
      location-mode = "path-bar";
      show-hidden = true;
      sidebar-width = 140;
      sort-column = "name";
      sort-directories-first = true;
      sort-order = "ascending";
      type-format = "category";
      view-type = "list";
      window-size = mkTuple [ 1178 372 ];
    };

    "org/gtk/settings/file-chooser" = {
      date-format = "regular";
      location-mode = "path-bar";
      show-hidden = false;
      show-size-column = true;
      show-type-column = true;
      sidebar-width = 168;
      sort-column = "name";
      sort-directories-first = false;
      sort-order = "ascending";
      type-format = "category";
      window-position = mkTuple [ 26 23 ];
      window-size = mkTuple [ 1203 902 ];
    };

  };
}

```````

`/home/andrew/Documents/nix-config/home/gnome/default.nix`:

```````nix
{ pkgs, lib, ... }: {
  programs.gnome-shell = {
    enable = true;
    # extensions = with pkgs.gnomeExtensions; [{ package = pop-shell; }];
  };

  # generated by https://github.com/nix-community/dconf2nix
  # dconf dump / | dconf2nix > home/gnome/dconf.nix
  imports = [ ./dconf.nix ];
}

```````

`/home/andrew/Documents/nix-config/home/neovim/configs/options.lua`:

```````lua
vim.g.mapleader = " "
vim.g.maplocalleader = ""
vim.opt.number = true
vim.opt.relativenumber = true

vim.opt.tabstop = 2
vim.opt.expandtab = true
vim.opt.softtabstop = 2
vim.opt.shiftwidth = 2

vim.opt.timeout = true
vim.opt.timeoutlen = 300

vim.opt.conceallevel = 0
vim.opt.termguicolors = true

require("catppuccin").setup({
	transparent_background = true,
	background = {
		light = "latte",
		dark = "mocha",
	},
})

vim.cmd([[colorscheme catppuccin]])

vim.keymap.set("", "<up>", "<nop>", { noremap = true })
vim.keymap.set("", "<down>", "<nop>", { noremap = true })
vim.keymap.set("i", "<up>", "<nop>", { noremap = true })
vim.keymap.set("i", "<down>", "<nop>", { noremap = true })

vim.opt.mouse = ""

```````

`/home/andrew/Documents/nix-config/home/neovim/configs/which-key.lua`:

```````lua
local wk = require("which-key")

wk.setup()
wk.add({
	{ "<leader>w", proxy = "<C-w>", group = "+windows" },
	{ "<leader>f", group = "+find" },
	{ "<leader>fl", group = "+find last" },
	{ "<leader>g", group = "+go to" },
	{ "<leader>gd", desc = "definition" },
	{ "<leader>F", desc = "format buffer" },
	{ "<leader>R", desc = "smart rename" },
})

```````

`/home/andrew/Documents/nix-config/home/neovim/configs/lsp.lua`:

```````lua
local lspconfig = require("lspconfig")
local capabilities = require("cmp_nvim_lsp").default_capabilities()

lspconfig.pyright.setup({ capabilities = capabilities });
lspconfig.ruff.setup({ capabilities = capabilities });
lspconfig.nil_ls.setup({ capabilities = capabilities });

lspconfig.lua_ls.setup({
  capabilities = capabilities,
  settings = {
    Lua = {
      diagnostics = {
        globals = {
          "vim",
        },
      },
    },
  },
})

```````

`/home/andrew/Documents/nix-config/home/neovim/configs/cmp.lua`:

```````lua
local cmp = require("cmp")

cmp.setup({
	snippet = {
		expand = function(args)
			vim.fn["vsnip#anonymous"](args.body)
		end,
	},
	window = {
		completion = cmp.config.window.bordered(),
		documentation = cmp.config.window.bordered(),
	},
	mapping = cmp.mapping.preset.insert({
		["<C-u>"] = cmp.mapping.scroll_docs(-4),
		["<C-d>"] = cmp.mapping.scroll_docs(4),
		["<Enter>"] = cmp.mapping.confirm({ select = false }),
		["<C-Space>"] = cmp.mapping.complete(),
		["<C-c>"] = cmp.mapping.abort(),
	}),
	sources = cmp.config.sources({
		{ name = "nvim_lsp" },
		{ name = "nvim_lsp_signature_help" },
	}, {
		{ name = "buffer" },
	}),
})

cmp.setup.cmdline({ "/", "?" }, {
	mapping = cmp.mapping.preset.cmdline(),
	sources = {
		{ name = "nvim_lsp_document_symbol" },
		{ name = "buffer" },
	},
})

cmp.setup.cmdline(":", {
	mapping = cmp.mapping.preset.cmdline(),
	sources = cmp.config.sources({
		{ name = "path" },
	}, {
		{ name = "cmdline" },
	}),
	matching = { disallow_symbol_nonprefix_matching = false },
})

```````

`/home/andrew/Documents/nix-config/home/neovim/configs/conform.lua`:

```````lua
local conform = require("conform")

conform.setup({
	formatters_by_ft = {
		lua = { "stylua" },
		python = { "isort", "ruff_format", "black" },
		nix = { "nixfmt" },
	},
})

vim.keymap.set("n", "<leader>F", function()
	conform.format({ async = true, lsp_format = "fallback" })
end)

```````

`/home/andrew/Documents/nix-config/home/neovim/configs/gitsigns.lua`:

```````lua
require("gitsigns").setup({
	signs = {
		add = { text = "┃" },
		change = { text = "┃" },
		delete = { text = "_" },
		topdelete = { text = "‾" },
		changedelete = { text = "~" },
		untracked = { text = "┆" },
	},
	signs_staged = {
		add = { text = "┃" },
		change = { text = "┃" },
		delete = { text = "_" },
		topdelete = { text = "‾" },
		changedelete = { text = "~" },
		untracked = { text = "┆" },
	},
	signs_staged_enable = true,
	signcolumn = true,
	numhl = false,
	linehl = false,
	word_diff = false,
	watch_gitdir = {
		follow_files = true,
	},
	auto_attach = true,
	attach_to_untracked = true,
	current_line_blame = true,
	current_line_blame_opts = {
		virt_text = true,
		virt_text_pos = "eol",
		delay = 1000,
		ignore_whitespace = false,
		virt_text_priority = 100,
	},
	current_line_blame_formatter = "<author>, <author_time:%R> - <summary>",
	sign_priority = 6,
	update_debounce = 100,
	status_formatter = nil,
	max_file_length = 40000,
	preview_config = {
		border = "single",
		style = "minimal",
		relative = "cursor",
		row = 0,
		col = 1,
	},
})

```````

`/home/andrew/Documents/nix-config/home/neovim/configs/treesitter.lua`:

```````lua
require("nvim-treesitter.configs").setup({
	auto_install = false,
	highlight = {
		enable = true,
		additional_vim_regex_highlighting = false,
	},
	indent = {
		enable = true,
	},
	refactor = {
		highlight_definitions = {
			enable = true,
			clear_on_cursor_move = true,
		},
		highlight_current_scope = {
			-- only highlights functions
			enable = false,
		},
		smart_rename = {
			enable = true,
			keymaps = {
				smart_rename = "<leader>R",
			},
		},
		navigation = {
			enable = true,
			keymaps = {
				goto_definition = "<leader>gd",
			},
		},
	},
	textobjects = {
		select = {
			enable = true,
			keymaps = {
				["af"] = "@function.outer",
				["if"] = "@function.inner",
			},
		},
	},
	playground = {
		enable = true,
	},
})

require("treesitter-context").setup({
	enable = true,
})

```````

`/home/andrew/Documents/nix-config/home/neovim/configs/telescope.lua`:

```````lua
local builtin = require("telescope.builtin")

vim.keymap.set("n", "<leader>ff", function()
	builtin.find_files({ hidden = true })
end, { desc = "file" })

vim.keymap.set("n", "<leader>fs", function()
	builtin.lsp_document_symbols({
		symbol_width = 60,
		ignore_symbols = "variable",
	})
end, { desc = "symbols (no variables)" })

vim.keymap.set("n", "<leader><S-g>", builtin.live_grep, { desc = "grep files" })

vim.keymap.set("n", "<leader>fls", builtin.resume, { desc = "search" })
vim.keymap.set("n", "<leader>flp", builtin.pickers, { desc = "pickers" })

```````

`/home/andrew/Documents/nix-config/home/neovim/default.nix`:

```````nix
{ pkgs, ... }: {
  programs.neovim = let
    toLua = str: ''
      lua << EOF
      ${str}
      EOF
    '';
    toLuaFile = path: ''
      lua << EOF
      ${builtins.readFile path}
      EOF
    '';
  in {
    enable = true;
    defaultEditor = true;

    viAlias = true;
    vimAlias = true;
    vimdiffAlias = true;

    extraPackages = with pkgs; [
      wl-clipboard
      # required by:
      nodejs_22 # treesitter
      tree-sitter # treesitter
      ripgrep # telescope
      fd # telescope
      black # conform
      isort # conform
      nixfmt # conform
      stylua # conform
      lua-language-server # lsp
      pyright # lsp
      ruff # lsp
      nil # lsp
    ];

    plugins = with pkgs.vimPlugins; [
      {
        plugin = catppuccin-nvim;
        config = toLuaFile ./configs/options.lua;
        # this hack sets leader key before any other hotkeys are added
      }

      diffview-nvim
      nvim-web-devicons
      mini-icons
      plenary-nvim
      {
        plugin = nvim-lspconfig;
        config = toLuaFile ./configs/lsp.lua;
      }

      {
        plugin = gitsigns-nvim;
        config = toLuaFile ./configs/gitsigns.lua;
      }

      {
        plugin = nvim-cmp;
        config = toLuaFile ./configs/cmp.lua;
      }
      cmp-cmdline
      cmp-path
      cmp-nvim-lsp
      cmp-buffer

      {
        plugin = telescope-nvim;
        config = toLuaFile ./configs/telescope.lua;
      }

      {
        plugin = nvim-treesitter.withPlugins
          (p: [ p.nix p.go p.python p.lua p.vimdoc ]);
        config = toLuaFile ./configs/treesitter.lua;
      }
      nvim-treesitter-context
      nvim-treesitter-refactor
      nvim-treesitter-textobjects

      {
        plugin = which-key-nvim;
        config = toLuaFile ./configs/which-key.lua;
      }

      {
        plugin = oil-nvim;
        config = toLua
          "require('oil').setup({ view_options = { show_hidden = true } })";
      }

      {
        plugin = conform-nvim;
        config = toLuaFile ./configs/conform.lua;
      }
    ];
  };
}

```````

`/home/andrew/Documents/nix-config/home/ghostty/default.nix`:

```````nix
{
  programs.ghostty = {
    enable = true;
    settings = {
      background-opacity = 0.95;
      font-size = 10;
      font-family = "FiraCode Nerd Font Mono";
      theme = "catppuccin-mocha";
    };
  };
}

```````

`/home/andrew/Documents/nix-config/home/vesktop/vesktop.desktop`:

```````desktop
[Desktop Entry]
Categories=Network;InstantMessaging;Chat
Exec=vesktop --disable-features=WebRtcAllowInputVolumeAdjustment %U
GenericName=Internet Messenger
Icon=vesktop
Keywords=discord;vencord;electron;chat
Name=VesktopFix
StartupWMClass=Vesktop
Type=Application
Version=1.4

```````

`/home/andrew/Documents/nix-config/home/vesktop/default.nix`:

```````nix
{
  home.file.".local/share/applications/vesktop.desktop".source = ./vesktop.desktop;
}

```````

`/home/andrew/Documents/nix-config/home/ssh/default.nix`:

```````nix
{
  home.file.".ssh/config".source = ./config;
}

```````

`/home/andrew/Documents/nix-config/home/ssh/config`:

```````
IdentityFile ~/.ssh/id_ed25519_proton
IdentityFile ~/.ssh/id_ed25519_spacedevlab
AddKeysToAgent yes
SetEnv TERM=xterm-256color

Host hetzner-main
  Hostname 188.34.186.105

Host hetzner-nix
  Hostname 116.203.213.92

```````

`/home/andrew/Documents/nix-config/home/git/default.nix`:

```````nix
{
  programs.git.enable = true;
  home.file.".gitconfig".source = ./.gitconfig;
  home.file.".personal.gitconfig".source = ./.personal.gitconfig;
  home.file.".spacedevlab.gitconfig".source = ./.spacedevlab.gitconfig;
}

```````

`/home/andrew/Documents/nix-config/home/kitty/default.nix`:

```````nix
{
  programs.kitty = {
    enable = true;
    settings = {
      background_opacity = 0.95;
      font_size = 10;
      font_family = "FiraCode Nerd Font Mono";
    };
    themeFile = "Catppuccin-Mocha";
  };
}

```````

`/home/andrew/Documents/nix-config/home/work/default.nix`:

```````nix
{
  programs.zsh = {
    shellAliases = {
      tc-gcloud = "gcloud config set account yatsura@tech-icard.com";
      tc-prod = ''
        gcloud compute ssh --zone "europe-west4-a" "prod-bastion-r1-a-0" --project "first-icard-prod" -- -A'';
      tc-test = ''
        gcloud compute ssh --zone "us-west1-a" "test-bastion-r1-a-0" --project "bionic-unity-253211" -- -A'';

      kvt-gcloud = "gcloud config set account yaa@kvitum.com";
      kvt-prod = ''
        gcloud compute ssh --zone "europe-west4-a" "prod-bastion-r1-a-0" --project "prod-kvitum-bastion" -- -A'';
      kvt-test = ''
        gcloud compute ssh --zone "europe-west4-a" "test-bastion-r1-a-0" --project "test-kvitum-bastion" -- -A'';
    };
  };
}

```````

`/home/andrew/Documents/nix-config/home/cs2/autoexec.cfg`:

```````cfg
r_show_build_info false

// grenades
bind "4" "buy hegrenade;slot6"
bind "c" "buy flashbang;slot7" // flash
bind "q" "buy smokegrenade;slot8" // smoke
bind "z" "buy molotov;buy incgrenade;slot10" // molly

// mouse jump
bind "mwheelup" "+jump"
bind "mwheeldown" "+jump"

// practice binds
bind "ALT" "noclip"
bind "[" "sv_rethrow_last_grenade"
bind "]" "ent_fire smokegrenade_projectile kill"

// other
bind "m" "voice_modenable_toggle"
bind "\" "teammenu"

```````

`/home/andrew/Documents/nix-config/home/cs2/default.nix`:

```````nix
{
  home.file.".local/share/Steam/steamapps/common/Counter-Strike Global Offensive/game/csgo/cfg/autoexec.cfg".source =
    ./autoexec.cfg;
  # LD_PRELOAD="" gamescope -W 3840 -H 2160 -w 1920 -h 1080 -r 144 -S integer --fullscreen --force-grab-cursor --immediate-flips -- %command% -novid -nojoy -refresh 144 -high -forcepreload 1 -threads 9 +mat_disable_fancy_blending 1 -mat_queue_mode 2 +engine_low_latency_sleep_after_client_tick +violence_hblood 0
}

```````

`/home/andrew/Documents/nix-config/home/mangohud/default.nix`:

```````nix
{
  home.file.".config/MangoHud/MangoHud.conf".source = ./MangoHud.conf;
  home.file.".config/MangoHud/presets.conf".source = ./presets.conf;
}

```````

`/home/andrew/Documents/nix-config/home/mangohud/presets.conf`:

```````conf
[preset 5]
cpu_stats=1
cpu_temp=1

gpu_stats=1
gpu_temp=1

fps=1
frame_timing=0
fps_text=FPS

ram=1
vram=1

```````

`/home/andrew/Documents/nix-config/home/mangohud/MangoHud.conf`:

```````conf
preset=5,4

reload_cfg=Shift_L+F4

toggle_preset=Shift_R+F10
toggle_hud_position=Shift_R+F11
toggle_hud=Shift_R+F12

```````

`/home/andrew/Documents/nix-config/home/hyprland/hyprland.conf`:

```````conf
# This is an example Hyprland config file.
# Refer to the wiki for more information.
# https://wiki.hyprland.org/Configuring/

# Please note not all available settings / options are set here.
# For a full list, see the wiki

# You can split this configuration into multiple files
# Create your files separately and then link them to this file like this:
# source = ~/.config/hypr/myColors.conf


################
### MONITORS ###
################

# See https://wiki.hyprland.org/Configuring/Monitors/
monitor=,highrr,auto,auto


###################
### MY PROGRAMS ###
###################

# See https://wiki.hyprland.org/Configuring/Keywords/

# Set programs that you use
$terminal = kitty
$fileManager = dolphin
$menu = tofi-drun --drun-launch=true


#################
### AUTOSTART ###
#################

# Autostart necessary processes (like notifications daemons, status bars, etc.)
# Or execute your favorite apps at launch like this:

# exec-once = $terminal
# exec-once = nm-applet &
exec-once = waybar & hyprpaper & firefox
exec-once = eval $(ssh-agent) & ssh-add
exec-once = eval $(gnome-keyreng-daemon --start)


#############################
### ENVIRONMENT VARIABLES ###
#############################

# See https://wiki.hyprland.org/Configuring/Environment-variables/

env = XCURSOR_SIZE,24
env = HYPRCURSOR_SIZE,24

env = SSH_AUTH_SOCK,$XDG_RUNTIME_DIR/ssh-agent.socket

#####################
### LOOK AND FEEL ###
#####################

# Refer to https://wiki.hyprland.org/Configuring/Variables/

# https://wiki.hyprland.org/Configuring/Variables/#general
general {
    gaps_in = 5
    gaps_out = 10

    border_size = 2

    # https://wiki.hyprland.org/Configuring/Variables/#variable-types for info about colors
    col.active_border = rgba(33ccffee) rgba(00ff99ee) 45deg
    col.inactive_border = rgba(595959aa)

    # Set to true enable resizing windows by clicking and dragging on borders and gaps
    resize_on_border = false

    # Please see https://wiki.hyprland.org/Configuring/Tearing/ before you turn this on
    allow_tearing = true

    layout = dwindle
    no_focus_fallback = true
}

# https://wiki.hyprland.org/Configuring/Variables/#decoration
decoration {
    rounding = 10

    # Change transparency of focused and unfocused windows
    active_opacity = 1.0
    inactive_opacity = 1.0

    shadow {
        enabled = true
        range = 4
        render_power = 3
        color = rgba(1a1a1aee)
    }

    # https://wiki.hyprland.org/Configuring/Variables/#blur
    blur {
        enabled = true
        size = 3
        passes = 1

        vibrancy = 0.1696
    }
}

# https://wiki.hyprland.org/Configuring/Variables/#animations
animations {
    enabled = yes, please :)

    # Default animations, see https://wiki.hyprland.org/Configuring/Animations/ for more

    bezier = easeOutQuint,0.23,1,0.32,1
    bezier = easeInOutCubic,0.65,0.05,0.36,1
    bezier = linear,0,0,1,1
    bezier = almostLinear,0.5,0.5,0.75,1.0
    bezier = quick,0.15,0,0.1,1

    animation = global, 1, 10, default
    animation = border, 1, 5.39, easeOutQuint
    animation = windows, 1, 4.79, easeOutQuint
    animation = windowsIn, 1, 4.1, easeOutQuint, popin 87%
    animation = windowsOut, 1, 1.49, linear, popin 87%
    animation = fadeIn, 1, 1.73, almostLinear
    animation = fadeOut, 1, 1.46, almostLinear
    animation = fade, 1, 3.03, quick
    animation = layers, 1, 3.81, easeOutQuint
    animation = layersIn, 1, 4, easeOutQuint, fade
    animation = layersOut, 1, 1.5, linear, fade
    animation = fadeLayersIn, 1, 1.79, almostLinear
    animation = fadeLayersOut, 1, 1.39, almostLinear
    animation = workspaces, 1, 1.94, almostLinear, fade
    animation = workspacesIn, 1, 1.21, almostLinear, fade
    animation = workspacesOut, 1, 1.94, almostLinear, fade
}

# Ref https://wiki.hyprland.org/Configuring/Workspace-Rules/
# "Smart gaps" / "No gaps when only"
# uncomment all if you wish to use that.
# workspace = w[tv1], gapsout:0, gapsin:0
# workspace = f[1], gapsout:0, gapsin:0
# windowrulev2 = bordersize 0, floating:0, onworkspace:w[tv1]
# windowrulev2 = rounding 0, floating:0, onworkspace:w[tv1]
# windowrulev2 = bordersize 0, floating:0, onworkspace:f[1]
# windowrulev2 = rounding 0, floating:0, onworkspace:f[1]

# See https://wiki.hyprland.org/Configuring/Dwindle-Layout/ for more
dwindle {
    pseudotile = false
    preserve_split = true
    smart_split = false
    smart_resizing = false
}

# https://wiki.hyprland.org/Configuring/Variables/#misc
misc {
    disable_hyprland_logo = true
    animate_manual_resizes = true

    key_press_enables_dpms = true
    mouse_move_enables_dpms = true
}

cursor {
    sync_gsettings_theme = true
    enable_hyprcursor = false
}

#############
### INPUT ###
#############

# https://wiki.hyprland.org/Configuring/Variables/#input
input {
    kb_layout = us
    kb_variant =
    kb_model =
    kb_options =
    kb_rules =

    sensitivity = 0 # -1.0 - 1.0, 0 means no modification.

    touchpad {
        natural_scroll = false
    }

    follow_mouse = 2
}

# https://wiki.hyprland.org/Configuring/Variables/#gestures
gestures {
    workspace_swipe = false
}

# Example per-device config
# See https://wiki.hyprland.org/Configuring/Keywords/#per-device-input-configs for more
device {
    name = epic-mouse-v1
    sensitivity = -0.5
}


###################
### KEYBINDINGS ###
###################

# See https://wiki.hyprland.org/Configuring/Keywords/
$mainMod = SUPER # Sets "Windows" key as main modifier

# Example binds, see https://wiki.hyprland.org/Configuring/Binds/ for more
bind = $mainMod SHIFT, Q, exit,
bind = $mainMod, Q, killactive,
bind = $mainMod, D, exec, $menu
bind = $mainMod, T, exec, $terminal
bind = $mainMod, O, togglesplit, # dwindle
bind = $mainMod, M, fullscreen, 1
bind = $mainMod, escape, hyprlock

# Move focus with mainMod + arrow keys
bind = $mainMod, h, movefocus, l
bind = $mainMod, l, movefocus, r
bind = $mainMod, k, movefocus, u
bind = $mainMod, j, movefocus, d

# Start resize submap on mainMod + return
bind = $mainMod, return, submap, resize
submap = resize

binde = , h, movewindow, l
binde = , l, movewindow, r
binde = , k, movewindow, u
binde = , j, movewindow, d

binde = SHIFT, h, resizeactive, -10 0
binde = SHIFT, l, resizeactive, 10 0
binde = SHIFT, k, resizeactive, 0 -10
binde = SHIFT, j, resizeactive, 0 10

bind = , escape, submap, reset
bind = , return, submap, reset
submap = reset

# Switch workspaces with mainMod + [0-9]
bind = $mainMod, 1, workspace, 1
bind = $mainMod, 2, workspace, 2
bind = $mainMod, 3, workspace, 3
bind = $mainMod, 4, workspace, 4
bind = $mainMod, 5, workspace, 5
bind = $mainMod, 6, workspace, 6
bind = $mainMod, 7, workspace, 7
bind = $mainMod, 8, workspace, 8
bind = $mainMod, 9, workspace, 9
bind = $mainMod, 0, workspace, 10

# Move active window to a workspace with mainMod + SHIFT + [0-9]
bind = $mainMod SHIFT, 1, movetoworkspace, 1
bind = $mainMod SHIFT, 2, movetoworkspace, 2
bind = $mainMod SHIFT, 3, movetoworkspace, 3
bind = $mainMod SHIFT, 4, movetoworkspace, 4
bind = $mainMod SHIFT, 5, movetoworkspace, 5
bind = $mainMod SHIFT, 6, movetoworkspace, 6
bind = $mainMod SHIFT, 7, movetoworkspace, 7
bind = $mainMod SHIFT, 8, movetoworkspace, 8
bind = $mainMod SHIFT, 9, movetoworkspace, 9
bind = $mainMod SHIFT, 0, movetoworkspace, 10

# Example special workspace (scratchpad)
bind = $mainMod, S, togglespecialworkspace, magic
bind = $mainMod SHIFT, S, movetoworkspace, special:magic

# Laptop multimedia keys for volume and LCD brightness
bindel = ,XF86AudioRaiseVolume, exec, wpctl set-volume -l 1 @DEFAULT_AUDIO_SINK@ 5%+
bindel = ,XF86AudioLowerVolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%-
bindel = ,XF86AudioMute, exec, wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle
bindel = ,XF86AudioMicMute, exec, wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle
bindel = ,XF86MonBrightnessUp, exec, brightnessctl s 10%+
bindel = ,XF86MonBrightnessDown, exec, brightnessctl s 10%-

# Requires playerctl
bindl = , XF86AudioNext, exec, playerctl next
bindl = , XF86AudioPause, exec, playerctl play-pause
bindl = , XF86AudioPlay, exec, playerctl play-pause
bindl = , XF86AudioPrev, exec, playerctl previous

##############################
### WINDOWS AND WORKSPACES ###
##############################

# See https://wiki.hyprland.org/Configuring/Window-Rules/ for more
# See https://wiki.hyprland.org/Configuring/Workspace-Rules/ for workspace rules

# Ignore maximize requests from apps. You'll probably like this.
windowrulev2 = suppressevent maximize, class:.*

# Fix some dragging issues with XWayland
windowrulev2 = nofocus,class:^$,title:^$,xwayland:1,floating:1,fullscreen:0,pinned:0

# Ensure tearing in cs2
windowrulev2 = immediate, class:^(cs2)$

```````

`/home/andrew/Documents/nix-config/home/hyprland/default.nix`:

```````nix
{ home.file.".config/hypr/hyprland.conf".source = ./hyprland.conf; }

```````

`/home/andrew/Documents/nix-config/home/default.nix`:

```````nix
{ username, ... }: {
  programs = {
    firefox.enable = true;
    chromium.enable = true;
  };

  home = {
    inherit username;
    homeDirectory = "/home/${username}";

    stateVersion = "24.11";
  };

  programs.home-manager.enable = true;
}

```````

`/home/andrew/Documents/nix-config/home/zsh/default.nix`:

```````nix
{
  programs.zsh = {
    enable = true;
    enableCompletion = true;
    autosuggestion.enable = true;
    syntaxHighlighting.enable = true;

    oh-my-zsh = {
      enable = true;
      theme = "robbyrussell";
      plugins = [ "git" "vi-mode" ];
    };

    shellAliases = {
      ll = "ls -l";
      gw = "git worktree";
    };
  };
}

```````

`/home/andrew/Documents/nix-config/hosts/r7-x3d/hardware-configuration.nix`:

```````nix
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "ahci" "nvme" "usbhid" "usb_storage" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-amd" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/c54c16ac-4cd1-47d2-9e4f-8b08cb8cfd48";
      fsType = "ext4";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/7B54-ABBB";
      fsType = "vfat";
      options = [ "fmask=0077" "dmask=0077" ];
    };

  swapDevices =
    [ { device = "/dev/disk/by-uuid/7eace960-9fe6-4f33-9810-52e4d2b5cf7a"; }
    ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp9s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp4s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}

```````

`/home/andrew/Documents/nix-config/hosts/r7-x3d/default.nix`:

```````nix
{
  imports = [
    ../../system

    ./hardware-configuration.nix
  ];

  modules = {
    audio.enable = true;
    gaming.enable = true;
    guitar.enable = true;
    logitech-g920.enable = true;
    minegrub.enable = true;
    nix.enable = true;
    obs.enable = true;
    plasma6.enable = true;
    wooting.enable = true;
  };

  boot.loader = {
    grub = {
      enable = true;
      device = "nodev";
      efiSupport = true;
      configurationLimit = 10;
      gfxmodeEfi = "3840x2160";
    };

    efi.canTouchEfiVariables = true;
  };

  networking = {
    hostName = "r7-x3d";
    networkmanager.enable = true;
    nameservers = [ "1.1.1.1" ];
  };

  services.xserver = {
    xkb = {
      layout = "us";
      variant = "";
    };
  };

  hardware.graphics = {
    enable = true;
    enable32Bit = true;
  };

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = "24.11"; # Did you read the comment?
}

```````

`/home/andrew/Documents/nix-config/hosts/hetzner/default.nix`:

```````nix
{ pkgs, ... }:

{
  nix.settings = {
    experimental-features = "nix-command flakes";
    auto-optimise-store = true;
    trusted-users = [ "@wheel" ];
  };

  environment.systemPackages = with pkgs; [ vim git ];

  fileSystems."/" = {
    device = "/dev/disk/by-label/nixos";
    fsType = "ext4";
  };
  fileSystems."/boot" = {
    device = "/dev/disk/by-label/boot";
    fsType = "ext4";
  };
  swapDevices = [{ device = "/dev/disk/by-label/swap"; }];

  documentation.nixos.enable = false;
  time.timeZone = "Europe/London";
  i18n.defaultLocale = "en_US.UTF-8";
  console.keyMap = "us";

  boot = {
    loader.grub.enable = true;
    loader.grub.device = "/dev/sda";
    initrd.availableKernelModules =
      [ "ahci" "xhci_pci" "virtio_pci" "virtio_scsi" "sd_mod" "sr_mod" "ext4" ];
  };

  users.users = {
    root.hashedPassword = "!";
    andrew = {
      isNormalUser = true;
      extraGroups = [ "wheel" ];
      openssh.authorizedKeys.keys = import ../../ssh-keys.nix;
    };
  };

  security.sudo.wheelNeedsPassword = false;

  services = {
    openssh = {
      enable = true;
      settings = {
        PermitRootLogin = "no";
        PasswordAuthentication = false;
        KbdInteractiveAuthentication = false;
      };
    };
  };
  networking.firewall.allowedTCPPorts = [ 22 ];

  system.stateVersion = "24.11";
}

```````

`/home/andrew/Documents/nix-config/hosts/ga401/hardware-configuration.nix`:

```````nix
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "nvme" "xhci_pci" "usbhid" "usb_storage" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-amd" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/c642c42b-f64e-4ebf-9771-1d85d2f3648c";
      fsType = "ext4";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/C7E3-DBA9";
      fsType = "vfat";
      options = [ "fmask=0077" "dmask=0077" ];
    };

  swapDevices =
    [ { device = "/dev/disk/by-uuid/88dbcb1a-02ea-4ca5-9416-eb8e8595a9f3"; }
    ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp2s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}

```````

`/home/andrew/Documents/nix-config/hosts/ga401/default.nix`:

```````nix
{
  imports = [
    ../../system

    ./hardware-configuration.nix
  ];

  modules = {
    audio.enable = true;
    gnome.enable = true;
    nix.enable = true;
  };

  boot.loader = {
    systemd-boot.enable = true;
    efi.canTouchEfiVariables = true;
  };

  networking = {
    hostName = "ga401";
    networkmanager.enable = true;
    nameservers = [ "1.1.1.1" ];
  };

  services.xserver = {
    videoDrivers = [ "nvidia" ];
    xkb = {
      layout = "us";
      variant = "";
    };
  };

  hardware = {
    graphics.enable = true;
    nvidia.dynamicBoost.enable = false;
  };

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = "24.11"; # Did you read the comment?
}

```````

`/home/andrew/Documents/nix-config/system/wooting/default.nix`:

```````nix
{ lib, config, ... }:
with lib;
let cfg = config.modules.wooting;
in {
  options.modules.wooting = {
    enable = mkEnableOption "Enable wooting configuration";
  };

  config =
    mkIf cfg.enable { services.udev.packages = [ pkgs.wooting-udev-rules ]; };
}

```````

`/home/andrew/Documents/nix-config/system/gnome/default.nix`:

```````nix
{ lib, config, ... }:
with lib;
let cfg = config.modules.gnome;
in {
  options.modules.gnome = {
    enable = mkEnableOption "Enable GNOME configuration";
  };

  config = mkIf cfg.enable {
    services.xserver = {
      enable = true;
      displayManager.gdm.enable = true;
      desktopManager.gnome.enable = true;
    };
  };
}

```````

`/home/andrew/Documents/nix-config/system/programs/default.nix`:

```````nix
{ lib, config, ... }:
with lib;
let cfg = config.modules.programs;
in {
  options.modules.programs = {
    enable = mkEnableOption "Enable programs configuration";
  };

  config = mkIf cfg.enable {
    environment.systemPackages = with pkgs; [
      inputs.ghostty.packages.x86_64-linux.default
      obsidian
      spotify
      telegram-desktop
      vesktop # fixed screensharing

      tree
      neofetch
      nixfmt

      ffmpeg
      git-crypt
    ];
  };
}

```````

`/home/andrew/Documents/nix-config/system/nix/default.nix`:

```````nix
{ lib, config, ... }:
with lib;
let cfg = config.modules.nix;
in {
  options.modules.nix = { enable = mkEnableOption "Enable nix configuration"; };

  config = mkIf cfg.enable {
    nix = {
      gc = {
        automatic = true;
        dates = "weekly";
        options = "--delete-older-than 7d";
      };

      settings = { experimental-features = [ "nix-command" "flakes" ]; };
    };

    nixpkgs.config.allowUnfree = true;

    time.timeZone = "Europe/Warsaw";

    i18n.defaultLocale = "en_US.UTF-8";
    i18n.extraLocaleSettings = {
      LC_ADDRESS = "en_US.UTF-8";
      LC_IDENTIFICATION = "en_US.UTF-8";
      LC_MEASUREMENT = "en_US.UTF-8";
      LC_MONETARY = "en_US.UTF-8";
      LC_NAME = "en_US.UTF-8";
      LC_NUMERIC = "en_US.UTF-8";
      LC_PAPER = "en_US.UTF-8";
      LC_TELEPHONE = "en_US.UTF-8";
      LC_TIME = "en_US.UTF-8";
    };

    services.pcscd.enable = true;
    programs.gnupg.agent = { enable = true; };
  };
}

```````

`/home/andrew/Documents/nix-config/system/fonts/default.nix`:

```````nix
{ lib, config, pkgs, ... }:
with lib;
let cfg = config.modules.fonts;
in {
  options.modules.fonts = {
    enable = mkEnableOption "Enable fonts configuration";
  };

  config =
    mkIf cfg.enable { fonts.packages = with pkgs; [ nerd-fonts.fira-code ]; };
}

```````

`/home/andrew/Documents/nix-config/system/plasma6/default.nix`:

```````nix
{ lib, config, pkgs, ... }:
with lib;
let
  cfg = config.modules.plasma6;
  askpass = pkgs.kdePackages.ksshaskpass;
in {
  options.modules.plasma6 = {
    enable = mkEnableOption "Enable KDE Plasma 6 configuration";
  };

  config = mkIf cfg.enable {
    services = {
      displayManager = {
        defaultSession = "plasma";
        sddm.enable = true;
      };

      desktopManager.plasma6.enable = true;
    };

    programs.ssh = {
      startAgent = true;
      enableAskPassword = true;
      askPassword = "${askpass}/bin/ksshaskpass";
    };

    environment = {
      systemPackages = [ askpass ];
      sessionVariables = { SSH_ASKPASS_REQUIRE = "prefer"; };
    };

    hardware.bluetooth.enable = true;
  };
}

```````

`/home/andrew/Documents/nix-config/system/work/default.nix`:

```````nix
{ lib, config, pkgs, ... }:
with lib;
let
  cfg = config.modules.work;
  gcloud = pkgs.google-cloud-sdk.withExtraComponents
    (with pkgs.google-cloud-sdk.components; [ gke-gcloud-auth-plugin ]);
in {
  options.modules.work = {
    enable = mkEnableOption "Enable work configuration";
  };

  config = mkIf cfg.enable {
    environment.systemPackages = with pkgs; [ pritunl-client gcloud ];

    systemd = {
      packages = [ pkgs.pritunl-client ];
      targets.multi-user.wants = [ "pritunl-client.service" ];
    };

    virtualisation.docker.enable = true;
    users.users.andrew.extraGroups = [ "docker" ];
  };
}

```````

`/home/andrew/Documents/nix-config/system/obs/default.nix`:

```````nix
{ lib, config, ... }:
with lib;
let cfg = config.modules.obs;
in {
  options.modules.obs = { enable = mkEnableOption "Enable OBS configuration"; };

  config = mkIf cfg.enable {
    environment.systemPackages = with pkgs;
      [
        (wrapOBS {
          plugins = with obs-studio-plugins; [
            wlrobs
            obs-backgroundremoval
            obs-pipewire-audio-capture
          ];
        })
      ];

    boot.extraModulePackages = with config.boot.kernelPackages;
      [ v4l2loopback ];
    boot.extraModprobeConfig = ''
      options v4l2loopback devices=1 video_nr=1 card_label="OBS Cam" exclusive_caps=1
    '';
    security.polkit.enable = true;
  };
}

```````

`/home/andrew/Documents/nix-config/system/guitar/default.nix`:

```````nix
{ lib, config, pkgs, ... }:
with lib;
let cfg = config.modules.guitar;
in {
  options.modules.guitar = {
    enable = mkEnableOption "Enable guitar configuration";
  };

  config = mkIf cfg.enable {
    environment.systemPackages = with pkgs; [ guitarix qjackctl reaper ];

    services.pipewire.jack.enable = true;
  };
}

```````

`/home/andrew/Documents/nix-config/system/logitech-g920/modeswitch`:

```````
# Logitech G920 Racing Wheel
DefaultVendor=046d
DefaultProduct=c261
MessageEndpoint=01
ResponseEndpoint=01
TargetClass=0x03
MessageContent="0f00010142"

```````

`/home/andrew/Documents/nix-config/system/logitech-g920/default.nix`:

```````nix
{ lib, config, ... }:
with lib;
let cfg = config.modules.logitech-g920;
in {
  options.modules.logitech-g920 = {
    enable = mkEnableOption "Enable Logitech G920 configuration";
  };

  config = mkIf cfg.enable {
    environment = {
      systemPackages = with pkgs; [ usb-modeswitch ];
      etc."usb_modeswitch.d/046d:c261".source = ./modeswitch;
    };

    # alternatively, use this command
    # `sudo usb_modeswitch -v 046d -p c261 -c system/logitech-g920/modeswitch`
  };
}

```````

`/home/andrew/Documents/nix-config/system/gaming/default.nix`:

```````nix
{ lib, config, pkgs, ... }:
with lib;
let cfg = config.modules.gaming;
in {
  options.modules.gaming = {
    enable = mkEnableOption "Enable gaming configuration";
  };

  config = mkIf cfg.enable {
    environment.systemPackages = with pkgs; [ mangohud ];

    programs = {
      gamescope.enable = true;
      steam.enable = true;
    };
  };
}

```````

`/home/andrew/Documents/nix-config/system/hyprland/default.nix`:

```````nix
{ lib, config, pkgs, ... }:
with lib;
let cfg = config.modules.hyprland;
in {
  options.modules.hyprland = {
    enable = mkEnableOption "Enable hyprland configuration";
  };

  config = mkIf cfg.enable {
    programs.hyprland.enable = true;
    environment.systemPackages = with pkgs; [
      dunst
      hyprlock
      hyprpaper
      kitty
      tofi
      waybar
    ];
  };
}

```````

`/home/andrew/Documents/nix-config/system/minegrub/default.nix`:

```````nix
{ lib, config, ... }:
with lib;
let cfg = config.modules.minegrub;
in {
  options.modules.minegrub = {
    enable = mkEnableOption "Enable minegrub configuration";
  };

  config = mkIf cfg.enable {
    boot.loader.grub = {
      minegrub-theme = {
        enable = true;
        boot-options-count = 10;
        background = "background_options/1.8  - [Classic Minecraft].png";
      };
    };
  };
}

```````

`/home/andrew/Documents/nix-config/system/default.nix`:

```````nix
{
  imports = [
    ./audio
    ./fonts
    ./gaming
    ./gnome
    ./guitar
    ./hyprland
    ./logitech-g920
    ./minegrub
    ./nix
    ./obs
    ./plasma6
    ./programs
    ./wooting
    ./work
  ];
}

```````

`/home/andrew/Documents/nix-config/system/audio/default.nix`:

```````nix
{ lib, config, ... }:
with lib;
let cfg = config.modules.audio;
in {
  options.modules.audio = {
    enable = mkEnableOption "Enable audio configuration";
  };

  config = mkIf cfg.enable {
    services.pulseaudio.enable = false;
    security.rtkit.enable = true;
    services.pipewire = {
      enable = true;
      alsa.enable = true;
      alsa.support32Bit = true;
      pulse.enable = true;
      jack.enable = true;
    };
  };
}

```````

`/home/andrew/Documents/nix-config/README.md`:

```````md
# nix-config

## Structure

Everything is split into separate modules:

- **`system/`** – System-wide configurations (e.g., hardware, system services, display managers).
- **`home/`** – Home Manager configurations (user-level settings, programs, and dotfiles).

These modules are then imported by per-user and per-machine configurations:

- **`hosts/`** – Contains host-specific configurations. Each host directory typically has:
  - `default.nix` (and possibly a `hardware-configuration.nix`)  
  - Imports relevant modules from `system/`
- **`users/`** – Contains user-specific configurations. Each user directory includes:
  - `home.nix` for Home Manager settings
  - `system.nix` for system-level settings that can’t be fully handled by Home Manager (e.g., Hyprland)

## References

- Much of this configuration is inspired by [ryan4yin/nix-config](https://github.com/ryan4yin/nix-config/tree/i3-kickstarter) and the accompanying [NixOS & Flakes](https://nixos-and-flakes.thiscute.world/) book.
- For hardware-specific presets, see [nixos/nixos-hardware](https://github.com/NixOS/nixos-hardware).


```````

`/home/andrew/Documents/nix-config/flake.nix`:

```````nix
{
  description = "nix configuration";

  inputs = {
    nixpkgs = { url = "github:nixos/nixpkgs/nixos-unstable"; };

    nixos-hardware = { url = "github:NixOS/nixos-hardware/master"; };

    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    minegrub-theme = { url = "github:Lxtharia/minegrub-theme"; };

    ghostty = { url = "github:ghostty-org/ghostty"; };
  };

  outputs =
    inputs@{ nixpkgs, nixos-hardware, home-manager, minegrub-theme, ... }: {
      nixosConfigurations = {
        r7-x3d = let
          username = "andrew";
          hostname = "r7-x3d";
        in nixpkgs.lib.nixosSystem {
          system = "x86_64-linux";
          modules = [
            ./hosts/${hostname}
            ./users/${username}/system.nix

            home-manager.nixosModules.home-manager
            {
              home-manager.useGlobalPkgs = true;
              home-manager.useUserPackages = true;
              home-manager.extraSpecialArgs = inputs // {
                inherit username hostname;
              };
              home-manager.users.${username} =
                import ./users/${username}/home.nix;
            }

            minegrub-theme.nixosModules.default
          ];
          specialArgs = { inherit inputs hostname; };
        };

        ga401 = let
          username = "andrew";
          hostname = "ga401";
        in nixpkgs.lib.nixosSystem {
          system = "x86_64-linux";
          modules = [
            ./hosts/${hostname}
            ./users/${username}/system.nix
            nixos-hardware.nixosModules.asus-zephyrus-ga401

            home-manager.nixosModules.home-manager
            {
              home-manager.useGlobalPkgs = true;
              home-manager.useUserPackages = true;
              home-manager.extraSpecialArgs = inputs // {
                inherit username hostname;
              };
              home-manager.users.${username} =
                import ./users/${username}/home.nix;
            }
          ];
          specialArgs = { inherit inputs hostname; };
        };

        hetzner-x86_64 = nixpkgs.lib.nixosSystem {
          system = "x86_64-linux";
          modules = [ ./hosts/hetzner ];
        };
      };
    };
}

```````

`/home/andrew/Documents/nix-config/flake.lock`:

```````lock
{
  "nodes": {
    "flake-compat": {
      "flake": false,
      "locked": {
        "lastModified": 1696426674,
        "narHash": "sha256-kvjfFW7WAETZlt09AgDn1MrtKzP7t90Vf7vypd3OL1U=",
        "owner": "edolstra",
        "repo": "flake-compat",
        "rev": "0f9255e01c2351cc7d116c072cb317785dd33b33",
        "type": "github"
      },
      "original": {
        "owner": "edolstra",
        "repo": "flake-compat",
        "type": "github"
      }
    },
    "flake-utils": {
      "inputs": {
        "systems": "systems"
      },
      "locked": {
        "lastModified": 1705309234,
        "narHash": "sha256-uNRRNRKmJyCRC/8y1RqBkqWBLM034y4qN7EprSdmgyA=",
        "owner": "numtide",
        "repo": "flake-utils",
        "rev": "1ef2e671c3b0c19053962c07dbda38332dcebf26",
        "type": "github"
      },
      "original": {
        "owner": "numtide",
        "repo": "flake-utils",
        "type": "github"
      }
    },
    "ghostty": {
      "inputs": {
        "flake-compat": "flake-compat",
        "nixpkgs-stable": "nixpkgs-stable",
        "nixpkgs-unstable": "nixpkgs-unstable",
        "zig": "zig"
      },
      "locked": {
        "lastModified": 1736113571,
        "narHash": "sha256-5viqX++mUONRNCHf393l26iZIvi2DlFLJR87Xrsod3s=",
        "owner": "ghostty-org",
        "repo": "ghostty",
        "rev": "c9c5ad43a54e815e664569f5e5809a71369b99a2",
        "type": "github"
      },
      "original": {
        "owner": "ghostty-org",
        "repo": "ghostty",
        "type": "github"
      }
    },
    "home-manager": {
      "inputs": {
        "nixpkgs": [
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1736066484,
        "narHash": "sha256-uTstP36WaFrw+TEHb8nLF14hFPzQBOhmIxzioHCDaL8=",
        "owner": "nix-community",
        "repo": "home-manager",
        "rev": "5ad12b6ea06b84e48f6b677957c74f32d47bdee0",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "home-manager",
        "type": "github"
      }
    },
    "minegrub-theme": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      },
      "locked": {
        "lastModified": 1734809378,
        "narHash": "sha256-HH3f/xu2Q06pkUOggRyTjcVdjes4exr59Do/4ti25N4=",
        "owner": "Lxtharia",
        "repo": "minegrub-theme",
        "rev": "987408b8d2cbf0a79a15981788d423fc3e54a80f",
        "type": "github"
      },
      "original": {
        "owner": "Lxtharia",
        "repo": "minegrub-theme",
        "type": "github"
      }
    },
    "nixos-hardware": {
      "locked": {
        "lastModified": 1739798439,
        "narHash": "sha256-GyipmjbbQEaosel/+wq1xihCKbv0/e1LU00x/8b/fP4=",
        "owner": "NixOS",
        "repo": "nixos-hardware",
        "rev": "3e2ea8a49d4d76276b0f4e2041df8ca5c0771371",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "master",
        "repo": "nixos-hardware",
        "type": "github"
      }
    },
    "nixpkgs": {
      "locked": {
        "lastModified": 1689850295,
        "narHash": "sha256-fUYf6WdQlhd2H+3aR8jST5dhFH1d0eE22aes8fNIfyk=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "5df4d78d54f7a34e9ea1f84a22b4fd9baebc68d0",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixos-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs-stable": {
      "locked": {
        "lastModified": 1733423277,
        "narHash": "sha256-TxabjxEgkNbCGFRHgM/b9yZWlBj60gUOUnRT/wbVQR8=",
        "owner": "nixos",
        "repo": "nixpkgs",
        "rev": "e36963a147267afc055f7cf65225958633e536bf",
        "type": "github"
      },
      "original": {
        "owner": "nixos",
        "ref": "release-24.11",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs-unstable": {
      "locked": {
        "lastModified": 1733229606,
        "narHash": "sha256-FLYY5M0rpa5C2QAE3CKLYAM6TwbKicdRK6qNrSHlNrE=",
        "owner": "nixos",
        "repo": "nixpkgs",
        "rev": "566e53c2ad750c84f6d31f9ccb9d00f823165550",
        "type": "github"
      },
      "original": {
        "owner": "nixos",
        "ref": "nixpkgs-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs_2": {
      "locked": {
        "lastModified": 1735834308,
        "narHash": "sha256-dklw3AXr3OGO4/XT1Tu3Xz9n/we8GctZZ75ZWVqAVhk=",
        "owner": "nixos",
        "repo": "nixpkgs",
        "rev": "6df24922a1400241dae323af55f30e4318a6ca65",
        "type": "github"
      },
      "original": {
        "owner": "nixos",
        "ref": "nixos-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "root": {
      "inputs": {
        "ghostty": "ghostty",
        "home-manager": "home-manager",
        "minegrub-theme": "minegrub-theme",
        "nixos-hardware": "nixos-hardware",
        "nixpkgs": "nixpkgs_2"
      }
    },
    "systems": {
      "locked": {
        "lastModified": 1681028828,
        "narHash": "sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=",
        "owner": "nix-systems",
        "repo": "default",
        "rev": "da67096a3b9bf56a91d16901293e51ba5b49a27e",
        "type": "github"
      },
      "original": {
        "owner": "nix-systems",
        "repo": "default",
        "type": "github"
      }
    },
    "zig": {
      "inputs": {
        "flake-compat": [
          "ghostty"
        ],
        "flake-utils": "flake-utils",
        "nixpkgs": [
          "ghostty",
          "nixpkgs-stable"
        ]
      },
      "locked": {
        "lastModified": 1717848532,
        "narHash": "sha256-d+xIUvSTreHl8pAmU1fnmkfDTGQYCn2Rb/zOwByxS2M=",
        "owner": "mitchellh",
        "repo": "zig-overlay",
        "rev": "02fc5cc555fc14fda40c42d7c3250efa43812b43",
        "type": "github"
      },
      "original": {
        "owner": "mitchellh",
        "repo": "zig-overlay",
        "type": "github"
      }
    }
  },
  "root": "root",
  "version": 7
}

```````